const fs = require('fs');
const path = require('path');

module.exports.config = {
    name: "bank",
    version: "3.0.0",
    hasPermssion: 0,
    credits: "Your Name",
    description: "ShiPu Bank PLC - Advanced Banking System",
    commandCategory: "economy",
    usages: "[-r/-d/-b/-t/-w] [amount] [@user]",
    cooldowns: 5
};

// ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶°‡¶æ‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶™‡¶æ‡¶•
const BACKUP_PATH = path.join(__dirname, 'shiPu_bank_backup.json');

// ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶°‡¶æ‡¶ü‡¶æ ‡¶≤‡ßã‡¶°/‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
const loadBankData = () => {
    try {
        if (fs.existsSync(BACKUP_PATH)) {
            return JSON.parse(fs.readFileSync(BACKUP_PATH));
        }
        return {};
    } catch (e) {
        console.error('Error loading bank data:', e);
        return {};
    }
};

const saveBankData = (data) => {
    fs.writeFileSync(BACKUP_PATH, JSON.stringify(data, null, 2));
};

// Currencies-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
const syncBankData = async (Currencies) => {
    const bankData = loadBankData();
    for (const userID in bankData) {
        await Currencies.setData(userID, {
            ...(await Currencies.getData(userID)),
            ...bankData[userID]
        });
    }
};

module.exports.run = async function({ api, event, args, Currencies }) {
    const { threadID, messageID, senderID } = event;
    const action = args[0]?.toLowerCase();
    const amount = parseInt(args[1]);
    const targetID = Object.keys(event.mentions)[0] || args[2];

    // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú
    await syncBankData(Currencies);

    // ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
    const getUserBankData = async (userID) => {
        const userData = await Currencies.getData(userID);
        const bankData = {
            bank: userData.bank || 0,
            bankRegistered: userData.bankRegistered || false,
            lastTransaction: userData.lastTransaction || null
        };
        
        // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
        const allData = loadBankData();
        allData[userID] = bankData;
        saveBankData(allData);
        
        return bankData;
    };

    const updateUserBankData = async (userID, newData) => {
        const currentData = await Currencies.getData(userID);
        const updatedData = {
            ...currentData,
            ...newData,
            lastTransaction: new Date().toISOString()
        };
        
        await Currencies.setData(userID, updatedData);
        
        // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
        const allData = loadBankData();
        allData[userID] = updatedData;
        saveBankData(allData);
    };

    // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü
    let actionType;
    if (['-r', 'register', 'reg'].includes(action)) actionType = 'register';
    else if (['-d', 'deposit', 'dep'].includes(action)) actionType = 'deposit';
    else if (['-b', 'balance', 'bal', 'b'].includes(action)) actionType = 'balance';
    else if (['-t', 'transfer', 'trans', 'send'].includes(action)) actionType = 'transfer';
    else if (['-w', 'withdraw', 'wd', 'with'].includes(action)) actionType = 'withdraw';
    else actionType = 'help';

    switch (actionType) {
        case 'register': {
            const userData = await getUserBankData(senderID);
            if (userData.bankRegistered) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ShiPu Bank PLC-‡¶§‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶°!", threadID, messageID);
            }
            await updateUserBankData(senderID, { 
                bankRegistered: true, 
                bank: 0,
                registrationDate: new Date().toISOString()
            });
            return api.sendMessage(
                "üè¶ | ShiPu Bank PLC-‡¶§‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n" +
                "‚úÖ | ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá!\n" +
                "üìÖ | ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: " + new Date().toLocaleString(),
                threadID, messageID
            );
        }

        case 'deposit': {
            if (isNaN(amount) || amount <= 0) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®!", threadID, messageID);
            }

            const userData = await getUserBankData(senderID);
            if (!userData.bankRegistered) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: bank -r", threadID, messageID);
            }

            const userMoney = await Currencies.getData(senderID);
            if (userMoney.money < amount) {
                return api.sendMessage(`‚ö†Ô∏è | ‡¶ì‡ßü‡¶æ‡¶≤‡ßá‡¶ü‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á! (‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®: ${amount}$)`, threadID, messageID);
            }

            await Currencies.decreaseMoney(senderID, amount);
            await updateUserBankData(senderID, { bank: userData.bank + amount });
            
            return api.sendMessage(
                `üè¶ | ShiPu Bank PLC - ‡¶°‡¶ø‡¶™‡ßã‡¶ú‡¶ø‡¶ü ‡¶∏‡¶´‡¶≤!\n\n` +
                `üíµ | ‡¶ì‡ßü‡¶æ‡¶≤‡ßá‡¶ü: ${userMoney.money - amount}$\n` +
                `üí∞ | ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${userData.bank + amount}$\n` +
                `üìÖ | ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü: ${new Date().toLocaleString()}`,
                threadID, messageID
            );
        }

        case 'withdraw': {
            if (isNaN(amount) || amount <= 0) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®!", threadID, messageID);
            }

            const userData = await getUserBankData(senderID);
            if (!userData.bankRegistered) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: bank -r", threadID, messageID);
            }

            if (userData.bank < amount) {
                return api.sendMessage(`‚ö†Ô∏è | ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á! (‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶®: ${userData.bank}$)`, threadID, messageID);
            }

            await Currencies.increaseMoney(senderID, amount);
            await updateUserBankData(senderID, { bank: userData.bank - amount });
            
            return api.sendMessage(
                `üè¶ | ShiPu Bank PLC - ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶∏‡¶´‡¶≤!\n\n` +
                `üíµ | ‡¶ì‡ßü‡¶æ‡¶≤‡ßá‡¶ü: ${(await Currencies.getData(senderID)).money}$\n` +
                `üí∞ | ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${userData.bank - amount}$\n` +
                `üìÖ | ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü: ${new Date().toLocaleString()}`,
                threadID, messageID
            );
        }

        case 'balance': {
            const userData = await getUserBankData(senderID);
            if (!userData.bankRegistered) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: bank -r", threadID, messageID);
            }

            const userMoney = await Currencies.getData(senderID);
            return api.sendMessage(
                `üè¶ | ShiPu Bank PLC - ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂\n\n` +
                `üë§ | ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï: ${(await api.getUserInfo(senderID))[senderID].name}\n` +
                `üìÖ | ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ñ‡ßã‡¶≤‡¶æ‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${new Date(userData.registrationDate || Date.now()).toLocaleDateString()}\n\n` +
                `üíµ | ‡¶ì‡ßü‡¶æ‡¶≤‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${userMoney.money}$\n` +
                `üí∞ | ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${userData.bank}$\n` +
                `üìä | ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶¶: ${userMoney.money + userData.bank}$\n\n` +
                `üîÑ | ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®: ${userData.lastTransaction ? new Date(userData.lastTransaction).toLocaleString() : 'N/A'}`,
                threadID, messageID
            );
        }

        case 'transfer': {
            if (isNaN(amount) || amount <= 0 || !targetID) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: bank -t <amount> @user", threadID, messageID);
            }

            const senderData = await getUserBankData(senderID);
            if (!senderData.bankRegistered) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: bank -r", threadID, messageID);
            }

            const targetData = await getUserBankData(targetID);
            if (!targetData.bankRegistered) {
                return api.sendMessage("‚ö†Ô∏è | ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡¶ï ShiPu Bank PLC-‡¶§‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶®!", threadID, messageID);
            }

            if (senderData.bank < amount) {
                return api.sendMessage(`‚ö†Ô∏è | ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á! (‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶®: ${senderData.bank}$)`, threadID, messageID);
            }

            await updateUserBankData(senderID, { bank: senderData.bank - amount });
            await updateUserBankData(targetID, { bank: targetData.bank + amount });

            const recipientName = (await api.getUserInfo(targetID))[targetID].name;
            return api.sendMessage(
                `üè¶ | ShiPu Bank PLC - ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤!\n\n` +
                `üë§ | ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡¶ï: ${recipientName}\n` +
                `üí∏ | ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${amount}$\n\n` +
                `üí∞ | ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${senderData.bank - amount}$\n` +
                `üìÖ | ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü: ${new Date().toLocaleString()}`,
                threadID, messageID
            );
        }

        default: {
            return api.sendMessage(
                `üè¶ | ShiPu Bank PLC - ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶ø‡¶Ç ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ\n\n` +
                `üìå | ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n` +
                `‚Ä¢ \`${global.config.PREFIX}bank -r\` - ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®\n` +
                `‚Ä¢ \`${global.config.PREFIX}bank -d <amount>\` - ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®\n` +
                `‚Ä¢ \`${global.config.PREFIX}bank -w <amount>\` - ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶§‡ßÅ‡¶≤‡ßÅ‡¶®\n` +
                `‚Ä¢ \`${global.config.PREFIX}bank -b\` - ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®\n` +
                `‚Ä¢ \`${global.config.PREFIX}bank -t <amount> @user\` - ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®\n\n` +
                `üîí | ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶!`,
                threadID, messageID
            );
        }
    }
};

// ‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú
module.exports.onLoad = async ({ Currencies }) => {
    await syncBankData(Currencies);
    console.log('ShiPu Bank PLC - ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶á‡¶ú‡¶°');
};
